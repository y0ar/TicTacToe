@page "/play"
@using System.Text
@rendermode InteractiveServer


<div class="playerturn">
    <p>@(PlayerName)'s turn: X</p>
</div>

<div class="gameboard">
    @for (int row = 0; row < GameTable.Length; row++)
    {
        @for (int column = 0; column < GameTable[row].Length; column++)
        {
            <div class="box" id="row@(row)_col@(column)" style="@(GetBorderStyle(row, column))">
                <p>@(GetBoxValue(GameTable[row][column]))</p>
            </div>
        }
    }
</div>

<div class="result">
    @switch (PlayerResult)
    {
        case Result.Win:
            <p class="win">You've won!</p>
            break;
        case Result.Lose:
            <p class="lose">You've lost!</p>
            break;
    }
</div>

<div class="replay">
    <button class="btn btn-primary" @onclick="Replay">Replay</button>
</div>

@code {
    private const int _tableSize = 3;

    public enum Result
    {
        None = 0,
        Lose = 1,
        Win = 2
    }

    public string PlayerName { get; set; } = "Player 1";

    public Result PlayerResult { get; set; } = Result.Win; // Result.None;

    public int[][] GameTable = new int[_tableSize][];

    protected override void OnInitialized()
    {
        InitializeGameTable(1);
    }

    public char GetBoxValue(int boxValue) => boxValue switch
    {
        -1 => ' ',
        0 => 'O',
        1 => 'X',
        _ => ' '
    };

    public void InitializeGameTable(int number)
    {
        for (int row = 0; row < _tableSize; row++)
        {
            GameTable[row] = new int[_tableSize];
            for (int column = 0; column < _tableSize; column++)
            {
                GameTable[row][column] = number;
            }
        }
    }

    public void Replay()
    {
        PlayerResult = Result.None;
        InitializeGameTable(-1);
    }

    public string GetBorderStyle(int row, int column)
    {
        string removeBorderLeft = "border-left: 0";
        string removeBorderRight = "border-right: 0";
        string removeBorderTop = "border-top: 0";
        string removeBorderBottom = "border-bottom: 0";
        string style = string.Empty;

        List<string> styleProperties = new List<string>();

        if (column == 0)
            styleProperties.Add(removeBorderLeft);

        if (column == GameTable[row].Length - 1)
            styleProperties.Add(removeBorderRight);

        if (row == 0)
            styleProperties.Add(removeBorderTop);

        if (row == GameTable.Length - 1)
            styleProperties.Add(removeBorderBottom);

        style = string.Join("; ", styleProperties);
        return style;
    }
}
