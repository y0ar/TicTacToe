@page "/play"
@using System.Text
@rendermode InteractiveServer


<div class="playerturn">
    <p>@(CurrentPlayer)'s turn: @(GetBoxValue((int)CurrentValue))</p>
</div>

<div class="gameboard">
    @for (int row = 0; row < GameTable.Length; row++)
    {
        @for (int column = 0; column < GameTable[row].Length; column++)
        {
            int rowParam = row;
            int colParam = column;
            <div class="box" id="row@(row)_col@(column)" style="@(GetBorderStyle(row, column))" @onclick="() => BoxClick(rowParam, colParam)" >
                <p>@(GetBoxValue(GameTable[row][column]))</p>
            </div>
        }
    }
</div>

<div class="result">
    @switch (PlayerResult)
    {
        case Result.Win:
            <p class="win">You've won!</p>
            break;
        case Result.Lose:
            <p class="lose">You've lost!</p>
            break;
        case Result.Draw:
            <p class="draw">It's a draw!</p>
            break;
    }
</div>

<div class="replay">
    <button class="btn btn-primary" @onclick="Replay">Replay</button>
</div>

@code {
    private const int _tableSize = 3;

    public enum Result
    {
        None = 0,
        Lose = 1,
        Win = 2,
        Draw = 3
    }

    public enum BoxValue
    {
        Empty = -1,
        O = 0,
        X = 1
    }

    public string PlayerOne { get; set; } = "Player 1";

    public string PlayerTwo { get; set; } = "Player 2";

    public string CurrentPlayer
    {
        get
        {
            return CurrentValue == BoxValue.X ? PlayerOne : PlayerTwo;
        }
    }

    public Result PlayerResult { get; set; } = Result.None;

    private BoxValue _currentValue = BoxValue.X; // Default value

    public BoxValue CurrentValue
    {
        get
        {
            return _currentValue;
        }
    }

    public BoxValue NextValue
    {
        get
        {
            return _currentValue;
        }
        set
        {
            _currentValue = value;
        }
    }

    public int[][] GameTable = new int[_tableSize][];

    protected override void OnInitialized()
    {
        InitializeGameTable(BoxValue.Empty);
    }

    public char GetBoxValue(int boxValue) => boxValue switch
    {
        (int)BoxValue.Empty => ' ',
        (int)BoxValue.O => 'O',
        (int)BoxValue.X => 'X',
        _ => ' '
    };

    public void InitializeGameTable(BoxValue boxValue)
    {
        for (int row = 0; row < _tableSize; row++)
        {
            GameTable[row] = new int[_tableSize];
            for (int column = 0; column < _tableSize; column++)
            {
                GameTable[row][column] = (int)boxValue;
            }
        }
    }

    public void Replay()
    {
        PlayerResult = Result.None;
        NextValue = BoxValue.X;
        InitializeGameTable(BoxValue.Empty);
    }

    public void BoxClick(int row, int column)
    {
        int cellValue = GameTable[row][column];
        if (cellValue == (int)BoxValue.Empty && PlayerResult == Result.None)
        {
            GameTable[row][column] = (int)CurrentValue;
            CheckForResult();
            NextValue = CurrentValue == BoxValue.X ? BoxValue.O : BoxValue.X;
        }
    }

    public void CheckForResult()
    {
        // Check Horizontally
        for (int row = 0; row < _tableSize; row++)
        {
            if (GameTable[row][0] == (int)_currentValue && GameTable[row][1] == (int)_currentValue && GameTable[row][2] == (int)_currentValue)
            {
                PlayerResult = Result.Win;
                return;
            }
        }

        // Check Vertically
        for (int column = 0; column < _tableSize; column++)
        {
            if (GameTable[0][column] == (int)_currentValue && GameTable[1][column] == (int)_currentValue && GameTable[2][column] == (int)_currentValue)
            {
                PlayerResult = Result.Win;
                return;
            }
        }

        // Check Diagonally
        if (GameTable[0][0] == (int)_currentValue && GameTable[1][1] == (int)_currentValue && GameTable[2][2] == (int)_currentValue)
        {
            PlayerResult = Result.Win;
            return;
        }
        if (GameTable[0][2] == (int)_currentValue && GameTable[1][1] == (int)_currentValue && GameTable[2][0] == (int)_currentValue)
        {
            PlayerResult = Result.Win;
            return;
        }

        // In case none of the above are true and every cell is full, it's a draw
        bool isDraw = true;
        for (int row = 0; row < _tableSize; row++)
        {
            if (!isDraw)
                break;
            for (int column = 0; column < _tableSize; column++)
            {
                if (GameTable[row][column] == (int)BoxValue.Empty)
                {
                    isDraw = false;
                    break;
                }
            }
        }

        if (isDraw)
            PlayerResult = Result.Draw;
        else
            PlayerResult = Result.None;
    }

    public void DrawResult(int row, int column)
    {
        // TODO
    }

    public string GetBorderStyle(int row, int column)
    {
        string removeBorderLeft = "border-left: 0";
        string removeBorderRight = "border-right: 0";
        string removeBorderTop = "border-top: 0";
        string removeBorderBottom = "border-bottom: 0";
        string style = string.Empty;

        List<string> styleProperties = new List<string>();

        if (column == 0)
            styleProperties.Add(removeBorderLeft);

        if (column == _tableSize - 1)
            styleProperties.Add(removeBorderRight);

        if (row == 0)
            styleProperties.Add(removeBorderTop);

        if (row == _tableSize - 1)
            styleProperties.Add(removeBorderBottom);

        style = string.Join("; ", styleProperties);
        return style;
    }
}
